import { EventCallback } from '../nanoevents.js';
import Base from '../api/base.js';
import { IEBayApiRequest } from '../request.js';
import { AppConfig, Scope } from '../types/index.js';
export type Token = {
    access_token: string;
    expires_in: number;
    token_type: string;
};
export type ClientToken = Token;
export type AuthToken = Token & {
    refresh_token: string;
    refresh_token_expires_in: number;
};
export default class OAuth2 extends Base {
    static readonly IDENTITY_ENDPOINT: Record<string, string>;
    static readonly AUTHORIZE_ENDPOINT: Record<string, string>;
    static readonly defaultScopes: Scope;
    private readonly emitter;
    private scope;
    private _clientToken?;
    private _authToken?;
    constructor(config: AppConfig, req: IEBayApiRequest);
    on(event: string, callback: EventCallback): () => void;
    static generateAuthUrl(sandbox: boolean, appId: string, ruName: string, scope: string[], state?: string): string;
    get identityEndpoint(): string;
    getAccessToken(): Promise<string>;
    getUserAccessToken(): string | null;
    getApplicationAccessToken(): Promise<string>;
    setClientToken(clientToken?: Token): void;
    setScope(scope: Scope): void;
    getScope(): string[];
    mintApplicationAccessToken(): Promise<ClientToken>;
    obtainApplicationAccessToken(): Promise<ClientToken>;
    generateAuthUrl(ruName?: string, scope?: string[], state?: string): string;
    mintUserAccessToken(code: string, ruName?: string | undefined): Promise<any>;
    getToken(code: string, ruName?: string | undefined): Promise<any>;
    refreshUserAccessToken(): Promise<AuthToken>;
    obtainToken(code: string): Promise<AuthToken>;
    getCredentials(): AuthToken | ClientToken | null;
    setCredentials(authToken: AuthToken | string): void;
    refreshToken(): Promise<Token>;
}
